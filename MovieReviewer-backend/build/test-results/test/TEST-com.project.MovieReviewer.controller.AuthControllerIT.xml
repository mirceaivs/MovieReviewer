<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.project.MovieReviewer.controller.AuthControllerIT" tests="3" skipped="0" failures="0" errors="0" timestamp="2025-06-22T14:40:19.943Z" hostname="Mircea" time="2.579">
  <properties/>
  <testcase name="registerAndLogin_flow_works()" classname="com.project.MovieReviewer.controller.AuthControllerIT" time="2.415"/>
  <testcase name="login_fails_withWrongPassword()" classname="com.project.MovieReviewer.controller.AuthControllerIT" time="0.107"/>
  <testcase name="register_fails_whenEmailAlreadyExists()" classname="com.project.MovieReviewer.controller.AuthControllerIT" time="0.056"/>
  <system-out><![CDATA[2025-06-22T17:40:14.343+03:00  INFO 1036 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.project.MovieReviewer.controller.AuthControllerIT]: AuthControllerIT does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-06-22T17:40:14.552+03:00  INFO 1036 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.project.MovieReviewer.MovieReviewerApplication for test class com.project.MovieReviewer.controller.AuthControllerIT

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.4.5)

Hibernate: drop table if exists actors cascade 
Hibernate: drop table if exists genre cascade 
Hibernate: drop table if exists movie_actors cascade 
Hibernate: drop table if exists movie_genres cascade 
Hibernate: drop table if exists movie_ratings cascade 
Hibernate: drop table if exists movies cascade 
Hibernate: drop table if exists reviews cascade 
Hibernate: drop table if exists role cascade 
Hibernate: drop table if exists user_profile cascade 
Hibernate: drop table if exists user_role cascade 
Hibernate: drop table if exists users cascade 
Hibernate: drop table if exists watchlist cascade 
Hibernate: create table actors (id bigint generated by default as identity, name varchar(255) not null unique, primary key (id))
Hibernate: create table genre (id bigint generated by default as identity, name varchar(255) not null, primary key (id))
Hibernate: create table movie_actors (actor_id bigint not null, movie_id bigint not null, primary key (actor_id, movie_id))
Hibernate: create table movie_genres (genre_id bigint not null, movie_id bigint not null, primary key (genre_id, movie_id))
Hibernate: create table movie_ratings (movie_id bigint not null, rating_value varchar(255), source varchar(255))
Hibernate: create table movies (imdb_rating float(53), metascore integer check ((metascore<=100) and (metascore>=0)), id bigint generated by default as identity, imdb_votes bigint check (imdb_votes>=0), awards varchar(255) not null, country varchar(255) not null, director varchar(255) not null, external_id varchar(255) unique, language varchar(255) not null, plot TEXT not null, poster varchar(255) not null, rated varchar(255) not null, release_year varchar(255) not null, released varchar(255) not null, response varchar(255) not null, runtime varchar(255) not null, title varchar(255) not null, type varchar(255) not null, writer varchar(255) not null, primary key (id))
Hibernate: create table reviews (rating integer not null check ((rating>=1) and (rating<=5)), id bigint generated by default as identity, movie_id bigint not null, user_id bigint not null, content varchar(255) not null, primary key (id), unique (user_id, movie_id))
Hibernate: create table role (id bigint generated by default as identity, name varchar(255) not null, primary key (id))
Hibernate: create table user_profile (created_at timestamp(6), id bigint not null, bio TEXT, first_name varchar(255) not null, last_name varchar(255) not null, username varchar(255) not null unique, primary key (id))
Hibernate: create table user_role (role_id bigint not null, user_id bigint not null, primary key (role_id, user_id))
Hibernate: create table users (id bigint generated by default as identity, email varchar(255) not null unique, password varchar(255) not null, primary key (id))
Hibernate: create table watchlist (date_added date, id bigint generated by default as identity, movie_id bigint, user_id bigint, primary key (id))
Hibernate: alter table if exists movie_actors add constraint FK7svt4y6p0f9gpjy10awtubp02 foreign key (actor_id) references actors
Hibernate: alter table if exists movie_actors add constraint FKs4rlt03tdf55rwso4uyrwm0oq foreign key (movie_id) references movies
Hibernate: alter table if exists movie_genres add constraint FKnup1hm4tk18om6dgawfgo5ay9 foreign key (genre_id) references genre
Hibernate: alter table if exists movie_genres add constraint FK4ak9svw913jblkfgru84h2phd foreign key (movie_id) references movies
Hibernate: alter table if exists movie_ratings add constraint FKq796jjb7ghjxkv9jbpfatiym2 foreign key (movie_id) references movies
Hibernate: alter table if exists reviews add constraint FK87tlqya0rq8ijfjscldpvvdyq foreign key (movie_id) references movies
Hibernate: alter table if exists reviews add constraint FKcgy7qjc1r99dp117y9en6lxye foreign key (user_id) references users
Hibernate: alter table if exists user_profile add constraint FKqkiwvdpk9b8kgeoxr328npxss foreign key (id) references users
Hibernate: alter table if exists user_role add constraint FKa68196081fvovjhkek5m97n3y foreign key (role_id) references role
Hibernate: alter table if exists user_role add constraint FKj345gk1bovqvfame88rcx7yyx foreign key (user_id) references users
Hibernate: alter table if exists watchlist add constraint FKg9ixof00icqr916rymid6wkcr foreign key (movie_id) references movies
Hibernate: alter table if exists watchlist add constraint FKden7i83qo2swnr5br4wgc5r7j foreign key (user_id) references users
Hibernate: select r1_0.id,r1_0.name from role r1_0 where r1_0.name=?
Hibernate: insert into role (name,id) values (?,default)
Hibernate: select r1_0.id,r1_0.name from role r1_0 where r1_0.name=?
Hibernate: insert into role (name,id) values (?,default)
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: insert into users (email,password,id) values (?,?,default)
Hibernate: insert into user_profile (bio,created_at,first_name,last_name,username,id) values (?,?,?,?,?,?)
Hibernate: insert into user_role (user_id,role_id) values (?,?)
Hibernate: insert into user_role (user_id,role_id) values (?,?)
Admin user created: admin@example.com / root
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select r1_0.id,r1_0.name from role r1_0 where r1_0.name=?
Hibernate: insert into users (email,password,id) values (?,?,default)
Hibernate: insert into user_profile (bio,created_at,first_name,last_name,username,id) values (?,?,?,?,?,?)
Hibernate: insert into user_role (user_id,role_id) values (?,?)
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select up1_0.id,up1_0.bio,up1_0.created_at,up1_0.first_name,up1_0.last_name,u1_0.id,u1_0.email,u1_0.password,r1_0.user_id,r1_1.id,r1_1.name,up1_0.username from user_profile up1_0 join users u1_0 on u1_0.id=up1_0.id left join user_role r1_0 on u1_0.id=r1_0.user_id left join role r1_1 on r1_1.id=r1_0.role_id where up1_0.id=?
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select r1_0.id,r1_0.name from role r1_0 where r1_0.name=?
Hibernate: insert into users (email,password,id) values (?,?,default)
Hibernate: insert into user_profile (bio,created_at,first_name,last_name,username,id) values (?,?,?,?,?,?)
Hibernate: insert into user_role (user_id,role_id) values (?,?)
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select up1_0.id,up1_0.bio,up1_0.created_at,up1_0.first_name,up1_0.last_name,u1_0.id,u1_0.email,u1_0.password,r1_0.user_id,r1_1.id,r1_1.name,up1_0.username from user_profile up1_0 join users u1_0 on u1_0.id=up1_0.id left join user_role r1_0 on u1_0.id=r1_0.user_id left join role r1_1 on r1_1.id=r1_0.role_id where up1_0.id=?
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select r1_0.id,r1_0.name from role r1_0 where r1_0.name=?
Hibernate: insert into users (email,password,id) values (?,?,default)
Hibernate: insert into user_profile (bio,created_at,first_name,last_name,username,id) values (?,?,?,?,?,?)
Hibernate: insert into user_role (user_id,role_id) values (?,?)
Hibernate: select u1_0.id,u1_0.email,u1_0.password from users u1_0 where u1_0.email=?
Hibernate: select up1_0.id,up1_0.bio,up1_0.created_at,up1_0.first_name,up1_0.last_name,u1_0.id,u1_0.email,u1_0.password,r1_0.user_id,r1_1.id,r1_1.name,up1_0.username from user_profile up1_0 join users u1_0 on u1_0.id=up1_0.id left join user_role r1_0 on u1_0.id=r1_0.user_id left join role r1_1 on r1_1.id=r1_0.role_id where up1_0.id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
